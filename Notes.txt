17-Jan
Good Design Indicators:
	- Small classes and functions
   - No duplication
   - Readable

18-Jan
19-Jan
	Editor:
		UC1: Load a document
		UC2: Edit the document
		UC3: Save the document
20-Jan:
	C++ programs are in Visual Studio project VSapp
23-Jan:
Banking application entities:
	BankClerk: Loginid, password, empid, emailid
              dispense cash, stop cheque.
	Dispatch section
	Corportate customer
	Individual customer
	NewAccount
	Bank HQ
	Branch of Bank
	Account Holder: Name, Address, Mobile, Email
	            Approve, transaction
	Welcome Kit
	Bank
	Cheque book
	Account
	Account Number - Attribute of Account
	Mobile number of customer
	Date of A/c opening
	Transaction - Operation of Account
	RuPay card
	Saving Account
	Current Account
	Withdrawal
	RBI
	Daily Report to RBI
	Quarterly report to Customer
	Email/SMS for every transaction




-----------------------------------------------------------
                           Account
-----------------------------------------------------------
Responsibility:                |      Collaborator
Tracks balance in account      |      Transaction
                               |      Customer
                               |
                               |
                               |
                               |
                               |
                               |
------------------------------------------------------------


-----------------------------------------------------------
                          Withdrawal
-----------------------------------------------------------
Responsibility                 |      Collaborator
Track debit in cash, cheque,   | Cheque book
UPI, NEFT, etc.                | Account
                               | Account Holder
                               |
                               |
                               |
                               |
                               |
------------------------------------------------------------


-----------------------------------------------------------
                        <<class>>
-----------------------------------------------------------
Responsibility                 |      Collaborator
                               |
                               |
                               |
                               |
                               |
                               |
                               |
                               |
------------------------------------------------------------

Draw conceptual class diagram 

24-Jan
Now draw some activity diagram.
Email me with use case diagram and conceptual class diagram.

25-Jan
Exercise: Draw a state Diagram
Email it with: Activity and Conceptual class diagram

27-Jan
Exercise: Draw a sequence diagram.

30-Jan
Exercise: Draw a sequence diagram.
Exercise: Redraw existing sequence diagram as communication

31-Jan
Exercise: Send communication diagram for your project.

1-Feb
Vision Document
SRS document
	- Functional
			Use case
			Activity
			Conceptual class diagram
	- Non Functional requirmenets
	- Domain requirements

Video of 46 minutes: https://youtu.be/nPQyO02dNHg 
Key points:
- Only a good programmer can become a good modeler in design phase.
- Model on giant whiteboards.
- Model a lot at the start of the sprint/analysis phase.
- Only truth is code. UML diagrams assist in writing/understanding code.
- Notation is not very important; Notation is good if it conveys the message.
- Sub teams can see each other's UML diagrams.
- Diagram with programmers and analysts together for shared understanding.
- Multiple models go together, e.g., Software class diagram and interaction diagram.
- Document important aspects of the project at the end of the project.
- UML tool is very useful for reverse engineering i.e. generating diagrams from code.
- In design, communication diagrams are important.

2-Feb
Airline reservation system:
Classes: Person, Airline, Ticket, Passenger, etc
Name is a string, then it comes an attribute in Passenger class.
Name has firstName and lastName, then it becomes class.
Weight is an int with no functionality, then make it an attribute.
Weight is a double with functionality, then make is a class.

Q022 Question - Solution S022
Q01 - S01
Q57 - S57
Exercise: Q58 
Solution S58 uploaded

3-Feb
Class: private, protected, public

Large project will have multiple Bounded contexts.
Each bounded context will be encapsulated with boundry classes.
Boundry classes static functions and interfaces.

Bounded contexts are logical entities.
Components are physical entities.

Library should be encapsulated with boundry classes.
Boost library 1.70 -> 1.81

Java Hibernate 1072 classes. Documentation was for 20 classes.

if (tc == 1) 
		...
else if (tc == 2)
		...
else if (tc == 3)
		...
else
	throw RuntimeError("...");

Exercise: Q30, Q40, Q43, Q36, Q41

6-Feb:
Inheritance leads to bigger classes as compared to Delegation.
Inheritance is less flexible than Delegation.
If all functionality of base class is not applicable to derived class, then inheritance is flawed.
Inheritance is more error-prone as compared to Delegation.

Flawed inheritance: Q72, Q31, Q71, Q52, Q54, Q74, Q75, 
Q76 - Flatten deep inheritance.

7-Feb:
Any piece of functionality should occur once and once only in our application. Dupplication will lead to
- bugs
- codebase become bigger
- other minor issues.
DRY - Q021, Q11, Q33, Q37, Q34, Q35

Feb-08:
Java: 1 Million function calls take 8 milliseconds and 1 Million objects are created in 23 milliseconds
Most of CPU time is idle.
Bottleneck: Database or Network.
When performance critical, Only there I may tolerate big classes/big function.

GoogleTest is a C++ project. Most functions are smaller than 10 lines.
CLOC tool reported 
-------------------------------------------------------------------------------
Language                   files          blank        comment           code
-------------------------------------------------------------------------------
C++                       106           8876          11299          36926
C/C++ Header              49           3732           9719          15164

The average for GoogleTest is 348 lines per .cpp file. This includes statements like
	#include
	#define
	using
	function signatures
	global/extern/static variables
The actual LOC (lines of code) recommended for a .cpp files is less than or equal to 100 lines.
Most functions of GoogleTest are less than 10 LOC.

Exercise: Q56, Q59

Feb 09:
Comments are bad.
Comments are good, when:
- I use them to explain "why" I am writing code this way; not what.
- Documenation for external parties.
- Warning.
- ToDo.
Exercise: Q20, Q06, Q07, Q21, Q22, Q23, Q25

Feb 10:
Why prefer Point1?
	- In C++, I have to remember to delete, if I use Point2.
Point1 - Mutable
Point2 - Immutable
Advantages of Immutability
	1. Thread-safe
	2. less error-prone
	3. Sharing

In Java/C#, if contents are important and not the number
then make the class immutable.
e.g. Point, Color, Dimension - Immutable
Employee, Window - Mutable
In C++, use Immutable when advantages > disadvantages.

	get lock

	....processing...

	free lock

Exercise: Q50, Q51, Q55
Email me S55

Feb 13:
	int My_open(char *filename, int mode) {
		int r = open(filename, mode);
		if (r == -1)
				throw
		return r;
	}

	if (open("filename", mode) == ERROR)
			...
	My_open("filename", mode);

	totalPay = 0;
	vector<Employee *> *employees = getEmployees();
	if (employees != nullptr)
		for (auto e : employees)
			totalPay += e->getPay();


class MouseEventaHandler {
public:
	virtual bool mouseDown() = 0;
	virtual bool mouseMove() = 0;
};
class MouseEventHandlerStandard : public MouseEventHandler {
public:
	bool mouseDown() { ... }
	bool mouseMove() { ... }
};

class NullMouseEventHandler : public MouseEventHandler {
public:
	bool mouseDown() { return true; }
	bool mouseMove() { return true;}
};








		










